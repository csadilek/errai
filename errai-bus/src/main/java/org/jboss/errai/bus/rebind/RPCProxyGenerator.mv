@comment{
Copyright 2009 JBoss, a divison Red Hat, Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}
@code{
def box(cls) { org.mvel2.util.ParseTools.boxPrimitive(cls); }

def pretty(cls) {
    return cls.getCanonicalName();
}

}class @{implementationClassName} implements @{interfaceClass.getName()}, org.jboss.errai.bus.client.framework.RPCStub {

    private org.jboss.errai.bus.client.api.RemoteCallback callback;
    private org.jboss.errai.bus.client.api.ErrorCallback errorCallback;

    private org.jboss.errai.bus.client.api.ErrorCallback DEFAULT_ERROR_CALLBACK =
    new org.jboss.errai.bus.client.api.ErrorCallback() {
                         public boolean error(org.jboss.errai.bus.client.api.Message message, Throwable throwable) {
                                org.jboss.errai.bus.client.util.ErrorHelper.handleMessageDeliveryFailure(org.jboss.errai.bus.client.ErraiBus.get(), message,
                                "Error calling remote RPC endpoint: " + message.getSubject(), throwable, false);
                                return true;
                         }
                   };

    public void setRemoteCallback(org.jboss.errai.bus.client.api.RemoteCallback callback) {
        this.callback = callback;
    }

    public void setErrorCallback(org.jboss.errai.bus.client.api.ErrorCallback callback) {
        this.errorCallback = callback;
    }

    @foreach{method : interfaceClass.getMethods()}
        public @{method.getReturnType() == Void ? "void" : pretty(method.getReturnType())}
               @{method.getName()}(@code{count = 0;}@foreach{type : method.getParameterTypes()}@{type.getCanonicalName()} _@{count++}@end{", "}) {

                if (errorCallback == null) {
                 org.jboss.errai.bus.client.api.base.MessageBuilder.createCall()
                    .call("@{interfaceClass.getName()}")
                    .endpoint("@{org.jboss.errai.bus.rebind.RebindUtils.createCallSignature(method)}", new Object[] {@code{count = 0;}@foreach{type : method.getParameterTypes()}_@{count++}@end{","}})
                    .respondTo(@{pretty(box(method.getReturnType()))}.class, callback)
                    .errorsHandledBy(null).sendNowWith(bus);
                } else {
                 org.jboss.errai.bus.client.api.base.MessageBuilder.createCall()
                    .call("@{interfaceClass.getName()}")
                    .endpoint("@{org.jboss.errai.bus.rebind.RebindUtils.createCallSignature(method)}", new Object[] {@code{count = 0;}@foreach{type : method.getParameterTypes()}_@{count++}@end{","}})
                    .respondTo(@{pretty(box(method.getReturnType()))}.class, callback)
                    .errorsHandledBy(errorCallback)
                    .sendNowWith(bus);
                }

                @if{method.getReturnType().toString().equals("void")}
                // nada
                @elseif{java.lang.Number.isAssignableFrom(box(method.getReturnType()))}
                return 0;
                @elseif{Boolean.isAssignableFrom(box(method.getReturnType()))}
                return false;
                @else{}
                // default
                return null;
                @end{}
        }
    @end{}
}

org.jboss.errai.bus.client.framework.RemoteServiceProxyFactory.addRemoteProxy(
                          @{interfaceClass.getName()}.class, new @{implementationClassName}()
                 );